package athletedatabase;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

public class AddEvent extends javax.swing.JFrame {
    
    private static final String url = "jdbc:sqlite:C:/Users/apple/Documents/CaH2O/komsaiPaMore/Komsai 127/ProjectGalore/AthleteDatabase.db";

    private int athleteID, sportID, year = 2017, hour, minute, month, day;
    private String name, venue, time, month2; // time = AM or time = PM
    private Boolean athleteIDStatus = false, sportIDStatus = false, monthStatus = false, dayStatus = false, yearStatus = false;
    private Boolean nameStatus = false, venueStatus = false, hourStatus = false, minuteStatus = false, timeStatus;
    
    private Calendar calendar = Calendar.getInstance();
    
    /**
     * Creates new form AddEvent
     */
    public AddEvent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        sportIDTextField = new javax.swing.JTextField();
        eventNameTextField = new javax.swing.JTextField();
        eventVenueTextField = new javax.swing.JTextField();
        athleteIDTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        amButton = new javax.swing.JRadioButton();
        pmButton = new javax.swing.JRadioButton();
        insertEventButton = new javax.swing.JButton();
        monthComboBox = new javax.swing.JComboBox<>();
        dayComboBox = new javax.swing.JComboBox<>();
        yearComboBox = new javax.swing.JComboBox<>();
        hourComboBox = new javax.swing.JComboBox<>();
        minuteComboBox = new javax.swing.JComboBox<>();
        goBackButton1 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel1.setFont(new java.awt.Font("Matura MT Script Capitals", 0, 24)); // NOI18N
        jLabel1.setText("Athlete Database");

        jPanel2.setBackground(new java.awt.Color(0, 204, 255));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel2.setFont(new java.awt.Font("Matura MT Script Capitals", 0, 24)); // NOI18N
        jLabel2.setText("Athlete Database");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(259, 259, 259)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(259, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addComponent(jLabel2)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(259, 259, 259)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(259, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addComponent(jLabel1)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(250, 95));
        setMaximumSize(new java.awt.Dimension(747, 447));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 204, 255));
        jPanel3.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel3.setFont(new java.awt.Font("Matura MT Script Capitals", 0, 24)); // NOI18N
        jLabel3.setText("Athlete Database");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(259, 259, 259)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(257, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addComponent(jLabel3)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel6.setBackground(new java.awt.Color(220, 220, 220));
        jPanel6.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("1. Enter participating ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("2. Enter athlete's sport ID:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("3. Enter event name:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setText("4. Enter event's venue:");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("5. Enter date of event:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("6. Enter time of event");

        sportIDTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sportIDTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sportIDTextFieldMouseClicked(evt);
            }
        });
        sportIDTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sportIDTextFieldKeyReleased(evt);
            }
        });

        eventNameTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        eventNameTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventNameTextFieldMouseClicked(evt);
            }
        });
        eventNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                eventNameTextFieldKeyReleased(evt);
            }
        });

        eventVenueTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        eventVenueTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventVenueTextFieldMouseClicked(evt);
            }
        });
        eventVenueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                eventVenueTextFieldKeyReleased(evt);
            }
        });

        athleteIDTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        athleteIDTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                athleteIDTextFieldMouseClicked(evt);
            }
        });
        athleteIDTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                athleteIDTextFieldKeyReleased(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setText("athlete's ID:");

        jLabel7.setText("Month");

        jLabel8.setText("Day");

        jLabel9.setText("Year");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText(":");

        amButton.setBackground(new java.awt.Color(220, 220, 220));
        amButton.setText("AM");
        amButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amButtonActionPerformed(evt);
            }
        });

        pmButton.setBackground(new java.awt.Color(220, 220, 220));
        pmButton.setText("PM");
        pmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmButtonActionPerformed(evt);
            }
        });

        insertEventButton.setBackground(new java.awt.Color(153, 153, 255));
        insertEventButton.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        insertEventButton.setText("Add Event");
        insertEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertEventButtonActionPerformed(evt);
            }
        });

        monthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January ", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        monthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboBoxActionPerformed(evt);
            }
        });

        dayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        dayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayComboBoxActionPerformed(evt);
            }
        });

        yearComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019" }));
        yearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboBoxActionPerformed(evt);
            }
        });

        hourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        hourComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourComboBoxActionPerformed(evt);
            }
        });

        minuteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        minuteComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minuteComboBoxActionPerformed(evt);
            }
        });

        goBackButton1.setBackground(new java.awt.Color(220, 220, 220));
        goBackButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        goBackButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/athletedatabase/arrow.png"))); // NOI18N
        goBackButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel17)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel18))))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20)
                        .addGap(89, 89, 89)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(341, 341, 341))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventVenueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(athleteIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sportIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(insertEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(hourComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(minuteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(amButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pmButton)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(goBackButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(goBackButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(athleteIDTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(sportIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addComponent(jLabel6)
                        .addGap(20, 20, 20))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(eventNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addGap(9, 9, 9)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jLabel7)
                            .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(dayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(hourComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minuteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(amButton)
                            .addComponent(pmButton)))
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(eventVenueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17)))
                .addGap(18, 18, 18)
                .addComponent(insertEventButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        AddMenu addMenu = new AddMenu();
        addMenu.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void athleteIDTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_athleteIDTextFieldMouseClicked
        athleteIDTextField.setFocusable(true);
    }//GEN-LAST:event_athleteIDTextFieldMouseClicked

    private void sportIDTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sportIDTextFieldMouseClicked
        sportIDTextField.setFocusable(true);
    }//GEN-LAST:event_sportIDTextFieldMouseClicked

    private void eventNameTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventNameTextFieldMouseClicked
        eventNameTextField.setFocusable(true);
    }//GEN-LAST:event_eventNameTextFieldMouseClicked

    private void eventVenueTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventVenueTextFieldMouseClicked
        if(nameStatus){
            JOptionPane.showMessageDialog(this, "Event already has a venue.");
        }else{
            eventVenueTextField.setEnabled(true);
            eventVenueTextField.setFocusable(true);
        }
    }//GEN-LAST:event_eventVenueTextFieldMouseClicked

    private void athleteIDTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_athleteIDTextFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
                int data = Integer.parseInt(athleteIDTextField.getText());
                if(data < 0){
                    JOptionPane.showMessageDialog(this, "Input must be positive.", "Error", JOptionPane.ERROR_MESSAGE);
                    athleteIDTextField.setText("");
                }else{
                    Connection conn = null;
                    Statement stmt = null;
                    try{
                        Class.forName("org.sqlite.JDBC");
                        conn = DriverManager.getConnection(url);
                        stmt = conn.createStatement();
                        
                        String exe = "SELECT athleteID FROM Athlete";
                        ResultSet rs = stmt.executeQuery(exe);
                        Boolean found = false;
                        while(rs.next()){
                            if(rs.getInt("athleteID") == data){
                                found = true;
                                break;
                            }
                        }
                        if(found){
                            athleteID = data;
                            athleteIDStatus = true;
                            athleteIDTextField.setFocusable(false);
                        }else{
                            JOptionPane.showMessageDialog(this, "Athlete not found.", "Error", JOptionPane.ERROR_MESSAGE);
                            athleteIDTextField.setText("");
                        }
                        
                        rs.close();
                    }catch(SQLException e){
                        System.out.println("SQLException from 'AddEvent.java-athleteIDTextFieldKeyReleased" + e.getMessage());
                    }catch(Exception e){
                        System.out.println("Exception from 'AddEvent.java-athleteIDTextFieldKeyReleased" + e.getMessage());
                    }finally{
                        try{
                            if(stmt != null){
                                conn.close();
                            }
                        }catch(SQLException e){
                            e.printStackTrace();
                        }
                    }
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Input must be numeric.", "Error", JOptionPane.ERROR_MESSAGE);
                athleteIDTextField.setText("");
            }
        }
    }//GEN-LAST:event_athleteIDTextFieldKeyReleased

    private void sportIDTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sportIDTextFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            try{
                int data = Integer.parseInt(sportIDTextField.getText());
                if(data < 0){
                    JOptionPane.showMessageDialog(this, "Input must be positive.", "Error", JOptionPane.ERROR_MESSAGE);
                    sportIDTextField.setText("");
                }else{
                    Connection conn = null;
                    Statement stmt = null;
                    try{
                        Class.forName("org.sqlite.JDBC");
                        conn = DriverManager.getConnection(url);
                        stmt = conn.createStatement();
                        
                        String exe = "SELECT * FROM Sport";
                        ResultSet rs = stmt.executeQuery(exe);
                        Boolean found = false;
                        while(rs.next()){
                            if(rs.getInt("sportID") == data){
                                found = true;
                                break;
                            }
                        }
                        
                        if(found){
                            sportID = data;
                            sportIDStatus = true;
                            sportIDTextField.setFocusable(false);
                        }else{
                            JOptionPane.showMessageDialog(this, "Sport not found.", "Error", JOptionPane.ERROR_MESSAGE);
                            sportIDTextField.setText("");
                        }
                        
                        rs.close();
                    }catch(SQLException e){
                        System.out.println("SQLException from 'AddEvent.java-sportIDTextFieldKeyReleased" + e.getMessage());
                    }catch(Exception e){
                        System.out.println("Exception from 'AddEvent.java-sportIDTextFieldKeyReleased" + e.getMessage());
                    }finally{
                        try{
                            if(stmt != null){
                                conn.close();
                            }
                        }catch(SQLException e){
                            e.printStackTrace();
                        }
                    }
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Input must be numeric.", "Error", JOptionPane.ERROR_MESSAGE);
                sportIDTextField.setText("");
            }
        }
    }//GEN-LAST:event_sportIDTextFieldKeyReleased

    private void eventNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventNameTextFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String data = eventNameTextField.getText();
            if(data == null){
                JOptionPane.showMessageDialog(this, "Please enter the event name.", "Error", JOptionPane.ERROR_MESSAGE);
                eventNameTextField.setText("");
            }else{
                name = data;
                nameStatus = true;
                eventNameTextField.setFocusable(false);
                
                Connection conn = null;
                Statement stmt = null;
                Boolean found = false;
                try{
                    Class.forName("org.sqlite.JDBC");
                    conn = DriverManager.getConnection(url);
                    stmt = conn.createStatement();

                    String exe = "SELECT eventName, eventVenue FROM Event";
                    ResultSet rs = stmt.executeQuery(exe);
                    while(rs.next()){
                        if(rs.getString("eventName").equals(data)){
                            found = true;
                            venue = rs.getString("eventVenue");
                            break;
                        }
                    }
                    rs.close();
                }catch(SQLException e){
                    System.out.println("SQLException from 'AddEvent.java-eventVenueTextFieldKeyReleased" + e.getMessage());
                }catch(Exception e){
                    System.out.println("Exception from 'AddEvent.java-eventVenueTextFieldKeyReleased" + e.getMessage());
                }finally{
                    try{
                        if(stmt != null){
                            conn.close();
                        }
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                }
                
                if(found){
                    eventVenueTextField.setEnabled(false);
                    venueStatus = true;
                }else{
                    eventVenueTextField.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_eventNameTextFieldKeyReleased

    private void eventVenueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventVenueTextFieldKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String data = eventVenueTextField.getText();
            if(data == null){
                JOptionPane.showMessageDialog(this, "Please enter the event's venue.", "Error", JOptionPane.ERROR_MESSAGE);
                eventVenueTextField.setText("");
            }else{
                venue = data;
                venueStatus = true;
                eventVenueTextField.setFocusable(false);
            }   
        }
    }//GEN-LAST:event_eventVenueTextFieldKeyReleased

    private void monthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboBoxActionPerformed
        month = monthComboBox.getSelectedIndex() + 1;
        month2 = monthComboBox.getSelectedItem().toString();
    }//GEN-LAST:event_monthComboBoxActionPerformed

    private void dayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayComboBoxActionPerformed
        day = Integer.parseInt(dayComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_dayComboBoxActionPerformed

    private void yearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboBoxActionPerformed
        year = Integer.parseInt(yearComboBox.getSelectedItem().toString());
        yearStatus = true;
    }//GEN-LAST:event_yearComboBoxActionPerformed

    private void hourComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourComboBoxActionPerformed
        hour = Integer.parseInt(hourComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_hourComboBoxActionPerformed

    private void minuteComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minuteComboBoxActionPerformed
        minute = Integer.parseInt(minuteComboBox.getSelectedItem().toString());
    }//GEN-LAST:event_minuteComboBoxActionPerformed

    private void amButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amButtonActionPerformed
        time = "AM";
        pmButton.setSelected(false);
    }//GEN-LAST:event_amButtonActionPerformed

    private void pmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmButtonActionPerformed
        time = "PM";
        amButton.setSelected(false);
    }//GEN-LAST:event_pmButtonActionPerformed

    private void insertEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertEventButtonActionPerformed
        int dateValid = dateValidity();
        if(dateValid != 0){
            if(dateValid == 1 && timeValidity()){
                monthStatus = true;
                dayStatus = true;
                hourStatus = true;
                minuteStatus = true;
                timeStatus = true;
            }else if(dateValid == 2){
                monthStatus = true;
                dayStatus = true;
                hourStatus = true;
                minuteStatus = true;
                timeStatus = true;
            }
            
            if(athleteIDStatus && sportIDStatus && nameStatus && venueStatus && monthStatus && dayStatus && yearStatus && hourStatus && minuteStatus && timeStatus){
                Connection conn = null;
                Statement stmt = null;
                try{
                    Class.forName("org.sqlite.JDBC");
                    conn = DriverManager.getConnection(url);
                    stmt = conn.createStatement();
                    
                    String m = "";
                    if(minute < 10){
                        m = "0";
                    }
                    m += minute;
                    
                    String h = "";
                    if(hour < 10){
                        h = "0";
                    }
                    h += hour;

                    String schedule = h + ":" + m + " " + time;

                    String exe = "INSERT INTO Event\nVALUES (" + athleteID + ", '" + sportID + "', '" + name + "', '" + venue + "', '" + month2 + "', " + day + ", " + year + ", '" + schedule + "')";
                    stmt.executeUpdate(exe);
                    System.out.println("Event added!");
                }catch(SQLException e){
                    System.out.println("SQLException from 'AddEvent.java-insertEventButtonActionPerformed': " + e.getMessage());
                }catch(Exception e){
                    System.out.println("Exception from 'AddEvent.java-insertEventButtonActionPerformed': " + e.getMessage());
                }finally{
                    try{
                        if(stmt != null){
                            conn.close();
                        }
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                }
                AddMenu addMenu = new AddMenu();
                this.setVisible(false);
                addMenu.setVisible(true);
            }else{
                JOptionPane.showMessageDialog(this, "Please enter required values.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Please enter a schedule on or after current date and time.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_insertEventButtonActionPerformed

    private int dateValidity(){
        if(month == 2 && day > 28){
           return 0;
        }else if(month2.equals("April") || month2.equals("June") || month2.equals("September") || month2.equals("November")){
            if(day > 30){
                return 0;
            }
        }else{
            SimpleDateFormat df = new SimpleDateFormat("MM dd, yyyy");
            Date now = new Date();
            String current = df.format(now);
            int curMonth = Integer.parseInt(current.substring(0, 2));
            int curDay = Integer.parseInt(current.substring(3, 5));

            if(month < curMonth){
                System.out.println("date is false");
                return 0;
            }else if(month == curMonth){
                if(day < curDay){
                    System.out.println("date is false");
                    return 0;
                }else if(day == curDay){
                    return 1;
                }
            }
            return 2;
        }
        return 2;
    }
    
    private Boolean timeValidity(){
        SimpleDateFormat df = new SimpleDateFormat("hh:mm a");
        Date now = new Date();
        String current = df.format(now);
        int curHour = Integer.parseInt(current.substring(0, 2));
        int curMinute = Integer.parseInt(current.substring(3, 5));
        String curTime = current.substring(6, 8);
        
        if(hour < curHour){
            System.out.println("time is false");
            return false;
        }else if(hour == curHour){
            if(minute < curMinute){
                System.out.println("time is false");
                return false;
            }else if(minute == curMinute){
                if(time.charAt(0) < curTime.charAt(0)){
                    System.out.println("time is false");
                    return false;
                }
            }
        }
        return true;
    }
    
    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        GUI menu = new GUI();
        this.setVisible(false);
        menu.setVisible(true);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void goBackButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButton1ActionPerformed
        AddMenu addMenu = new AddMenu();
        this.setVisible(false);
        addMenu.setVisible(true);
    }//GEN-LAST:event_goBackButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEvent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton amButton;
    private javax.swing.JTextField athleteIDTextField;
    private javax.swing.JComboBox<String> dayComboBox;
    private javax.swing.JTextField eventNameTextField;
    private javax.swing.JTextField eventVenueTextField;
    private javax.swing.JButton goBackButton1;
    private javax.swing.JComboBox<String> hourComboBox;
    private javax.swing.JButton insertEventButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JComboBox<String> minuteComboBox;
    private javax.swing.JComboBox<String> monthComboBox;
    private javax.swing.JRadioButton pmButton;
    private javax.swing.JTextField sportIDTextField;
    private javax.swing.JComboBox<String> yearComboBox;
    // End of variables declaration//GEN-END:variables
}
